schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false
  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
columns and relationships of "Answer"
"""
type Answer {
  """An object relationship"""
  FormItem: FormItem
  formItemId: String
  id: String!
  responseId: String
  value: String!
}

"""
aggregated selection of "Answer"
"""
type Answer_aggregate {
  aggregate: Answer_aggregate_fields
  nodes: [Answer!]!
}

input Answer_aggregate_bool_exp {
  count: Answer_aggregate_bool_exp_count
}

input Answer_aggregate_bool_exp_count {
  arguments: [Answer_select_column!]
  distinct: Boolean
  filter: Answer_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "Answer"
"""
type Answer_aggregate_fields {
  count(columns: [Answer_select_column!], distinct: Boolean): Int!
  max: Answer_max_fields
  min: Answer_min_fields
}

"""
order by aggregate values of table "Answer"
"""
input Answer_aggregate_order_by {
  count: order_by
  max: Answer_max_order_by
  min: Answer_min_order_by
}

"""
input type for inserting array relation for remote table "Answer"
"""
input Answer_arr_rel_insert_input {
  data: [Answer_insert_input!]!
  """upsert condition"""
  on_conflict: Answer_on_conflict
}

"""
Boolean expression to filter rows from the table "Answer". All fields are combined with a logical 'AND'.
"""
input Answer_bool_exp {
  FormItem: FormItem_bool_exp
  _and: [Answer_bool_exp!]
  _not: Answer_bool_exp
  _or: [Answer_bool_exp!]
  formItemId: String_comparison_exp
  id: String_comparison_exp
  responseId: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "Answer"
"""
enum Answer_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  Answer_pkey
}

"""
input type for inserting data into table "Answer"
"""
input Answer_insert_input {
  FormItem: FormItem_obj_rel_insert_input
  formItemId: String
  id: String
  responseId: String
  value: String
}

"""aggregate max on columns"""
type Answer_max_fields {
  formItemId: String
  id: String
  responseId: String
  value: String
}

"""
order by max() on columns of table "Answer"
"""
input Answer_max_order_by {
  formItemId: order_by
  id: order_by
  responseId: order_by
  value: order_by
}

"""aggregate min on columns"""
type Answer_min_fields {
  formItemId: String
  id: String
  responseId: String
  value: String
}

"""
order by min() on columns of table "Answer"
"""
input Answer_min_order_by {
  formItemId: order_by
  id: order_by
  responseId: order_by
  value: order_by
}

"""
response of any mutation on the table "Answer"
"""
type Answer_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [Answer!]!
}

"""
on_conflict condition type for table "Answer"
"""
input Answer_on_conflict {
  constraint: Answer_constraint!
  update_columns: [Answer_update_column!]! = []
  where: Answer_bool_exp
}

"""Ordering options when selecting data from "Answer"."""
input Answer_order_by {
  FormItem: FormItem_order_by
  formItemId: order_by
  id: order_by
  responseId: order_by
  value: order_by
}

"""primary key columns input for table: Answer"""
input Answer_pk_columns_input {
  id: String!
}

"""
select columns of table "Answer"
"""
enum Answer_select_column {
  """column name"""
  formItemId
  """column name"""
  id
  """column name"""
  responseId
  """column name"""
  value
}

"""
input type for updating data in table "Answer"
"""
input Answer_set_input {
  formItemId: String
  id: String
  responseId: String
  value: String
}

"""
Streaming cursor of the table "Answer"
"""
input Answer_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Answer_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Answer_stream_cursor_value_input {
  formItemId: String
  id: String
  responseId: String
  value: String
}

"""
update columns of table "Answer"
"""
enum Answer_update_column {
  """column name"""
  formItemId
  """column name"""
  id
  """column name"""
  responseId
  """column name"""
  value
}

input Answer_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: Answer_set_input
  """filter the rows which have to be updated"""
  where: Answer_bool_exp!
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
columns and relationships of "Folder"
"""
type Folder {
  """An array relationship"""
  Forms(
    """distinct select on columns"""
    distinct_on: [Form_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Form_order_by!]
    """filter the rows returned"""
    where: Form_bool_exp
  ): [Form!]!
  """An aggregate relationship"""
  Forms_aggregate(
    """distinct select on columns"""
    distinct_on: [Form_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Form_order_by!]
    """filter the rows returned"""
    where: Form_bool_exp
  ): Form_aggregate!
  id: String!
  name: String!
  ownerId: String!
}

"""
aggregated selection of "Folder"
"""
type Folder_aggregate {
  aggregate: Folder_aggregate_fields
  nodes: [Folder!]!
}

"""
aggregate fields of "Folder"
"""
type Folder_aggregate_fields {
  count(columns: [Folder_select_column!], distinct: Boolean): Int!
  max: Folder_max_fields
  min: Folder_min_fields
}

"""
Boolean expression to filter rows from the table "Folder". All fields are combined with a logical 'AND'.
"""
input Folder_bool_exp {
  Forms: Form_bool_exp
  Forms_aggregate: Form_aggregate_bool_exp
  _and: [Folder_bool_exp!]
  _not: Folder_bool_exp
  _or: [Folder_bool_exp!]
  id: String_comparison_exp
  name: String_comparison_exp
  ownerId: String_comparison_exp
}

"""
unique or primary key constraints on table "Folder"
"""
enum Folder_constraint {
  """
  unique or primary key constraint on columns "ownerId", "name"
  """
  Folder_ownerId_name_key
  """
  unique or primary key constraint on columns "id"
  """
  Folder_pkey
}

"""
input type for inserting data into table "Folder"
"""
input Folder_insert_input {
  Forms: Form_arr_rel_insert_input
  id: String
  name: String
  ownerId: String
}

"""aggregate max on columns"""
type Folder_max_fields {
  id: String
  name: String
  ownerId: String
}

"""aggregate min on columns"""
type Folder_min_fields {
  id: String
  name: String
  ownerId: String
}

"""
response of any mutation on the table "Folder"
"""
type Folder_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [Folder!]!
}

"""
input type for inserting object relation for remote table "Folder"
"""
input Folder_obj_rel_insert_input {
  data: Folder_insert_input!
  """upsert condition"""
  on_conflict: Folder_on_conflict
}

"""
on_conflict condition type for table "Folder"
"""
input Folder_on_conflict {
  constraint: Folder_constraint!
  update_columns: [Folder_update_column!]! = []
  where: Folder_bool_exp
}

"""Ordering options when selecting data from "Folder"."""
input Folder_order_by {
  Forms_aggregate: Form_aggregate_order_by
  id: order_by
  name: order_by
  ownerId: order_by
}

"""primary key columns input for table: Folder"""
input Folder_pk_columns_input {
  id: String!
}

"""
select columns of table "Folder"
"""
enum Folder_select_column {
  """column name"""
  id
  """column name"""
  name
  """column name"""
  ownerId
}

"""
input type for updating data in table "Folder"
"""
input Folder_set_input {
  id: String
  name: String
  ownerId: String
}

"""
Streaming cursor of the table "Folder"
"""
input Folder_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Folder_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Folder_stream_cursor_value_input {
  id: String
  name: String
  ownerId: String
}

"""
update columns of table "Folder"
"""
enum Folder_update_column {
  """column name"""
  id
  """column name"""
  name
  """column name"""
  ownerId
}

input Folder_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: Folder_set_input
  """filter the rows which have to be updated"""
  where: Folder_bool_exp!
}

"""
columns and relationships of "Form"
"""
type Form {
  """An object relationship"""
  Folder: Folder
  """An array relationship"""
  FormItems(
    """distinct select on columns"""
    distinct_on: [FormItem_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FormItem_order_by!]
    """filter the rows returned"""
    where: FormItem_bool_exp
  ): [FormItem!]!
  """An aggregate relationship"""
  FormItems_aggregate(
    """distinct select on columns"""
    distinct_on: [FormItem_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FormItem_order_by!]
    """filter the rows returned"""
    where: FormItem_bool_exp
  ): FormItem_aggregate!
  createdAt: timestamp!
  favorite: Boolean!
  folderId: String
  id: String!
  name: String!
  order: Int!
  ownerId: String!
  responses: Int!
  style(
    """JSON select path"""
    path: String
  ): jsonb
  thumbnail: String
  updatedAt: timestamp!
}

"""
columns and relationships of "FormItem"
"""
type FormItem {
  """An array relationship"""
  Answers(
    """distinct select on columns"""
    distinct_on: [Answer_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Answer_order_by!]
    """filter the rows returned"""
    where: Answer_bool_exp
  ): [Answer!]!
  """An aggregate relationship"""
  Answers_aggregate(
    """distinct select on columns"""
    distinct_on: [Answer_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Answer_order_by!]
    """filter the rows returned"""
    where: Answer_bool_exp
  ): Answer_aggregate!
  """An object relationship"""
  Form: Form!
  formId: String!
  id: String!
  image(
    """JSON select path"""
    path: String
  ): jsonb
  items(
    """JSON select path"""
    path: String
  ): jsonb
  name: String!
  order: Int!
  required: Boolean!
  section: Int!
  type: FormItemType_enum
}

"""extra settings for form items"""
type FormItemMeta {
  """An object relationship"""
  FormItem: FormItem!
  formItemId: String!
  id: Int!
  key: String!
  value: String!
}

"""
aggregated selection of "FormItemMeta"
"""
type FormItemMeta_aggregate {
  aggregate: FormItemMeta_aggregate_fields
  nodes: [FormItemMeta!]!
}

"""
aggregate fields of "FormItemMeta"
"""
type FormItemMeta_aggregate_fields {
  avg: FormItemMeta_avg_fields
  count(columns: [FormItemMeta_select_column!], distinct: Boolean): Int!
  max: FormItemMeta_max_fields
  min: FormItemMeta_min_fields
  stddev: FormItemMeta_stddev_fields
  stddev_pop: FormItemMeta_stddev_pop_fields
  stddev_samp: FormItemMeta_stddev_samp_fields
  sum: FormItemMeta_sum_fields
  var_pop: FormItemMeta_var_pop_fields
  var_samp: FormItemMeta_var_samp_fields
  variance: FormItemMeta_variance_fields
}

"""aggregate avg on columns"""
type FormItemMeta_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "FormItemMeta". All fields are combined with a logical 'AND'.
"""
input FormItemMeta_bool_exp {
  FormItem: FormItem_bool_exp
  _and: [FormItemMeta_bool_exp!]
  _not: FormItemMeta_bool_exp
  _or: [FormItemMeta_bool_exp!]
  formItemId: String_comparison_exp
  id: Int_comparison_exp
  key: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "FormItemMeta"
"""
enum FormItemMeta_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  FormItemMeta_pkey
}

"""
input type for incrementing numeric columns in table "FormItemMeta"
"""
input FormItemMeta_inc_input {
  id: Int
}

"""
input type for inserting data into table "FormItemMeta"
"""
input FormItemMeta_insert_input {
  FormItem: FormItem_obj_rel_insert_input
  formItemId: String
  id: Int
  key: String
  value: String
}

"""aggregate max on columns"""
type FormItemMeta_max_fields {
  formItemId: String
  id: Int
  key: String
  value: String
}

"""aggregate min on columns"""
type FormItemMeta_min_fields {
  formItemId: String
  id: Int
  key: String
  value: String
}

"""
response of any mutation on the table "FormItemMeta"
"""
type FormItemMeta_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [FormItemMeta!]!
}

"""
on_conflict condition type for table "FormItemMeta"
"""
input FormItemMeta_on_conflict {
  constraint: FormItemMeta_constraint!
  update_columns: [FormItemMeta_update_column!]! = []
  where: FormItemMeta_bool_exp
}

"""Ordering options when selecting data from "FormItemMeta"."""
input FormItemMeta_order_by {
  FormItem: FormItem_order_by
  formItemId: order_by
  id: order_by
  key: order_by
  value: order_by
}

"""primary key columns input for table: FormItemMeta"""
input FormItemMeta_pk_columns_input {
  id: Int!
}

"""
select columns of table "FormItemMeta"
"""
enum FormItemMeta_select_column {
  """column name"""
  formItemId
  """column name"""
  id
  """column name"""
  key
  """column name"""
  value
}

"""
input type for updating data in table "FormItemMeta"
"""
input FormItemMeta_set_input {
  formItemId: String
  id: Int
  key: String
  value: String
}

"""aggregate stddev on columns"""
type FormItemMeta_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type FormItemMeta_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type FormItemMeta_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "FormItemMeta"
"""
input FormItemMeta_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: FormItemMeta_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input FormItemMeta_stream_cursor_value_input {
  formItemId: String
  id: Int
  key: String
  value: String
}

"""aggregate sum on columns"""
type FormItemMeta_sum_fields {
  id: Int
}

"""
update columns of table "FormItemMeta"
"""
enum FormItemMeta_update_column {
  """column name"""
  formItemId
  """column name"""
  id
  """column name"""
  key
  """column name"""
  value
}

input FormItemMeta_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: FormItemMeta_inc_input
  """sets the columns of the filtered rows to the given values"""
  _set: FormItemMeta_set_input
  """filter the rows which have to be updated"""
  where: FormItemMeta_bool_exp!
}

"""aggregate var_pop on columns"""
type FormItemMeta_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type FormItemMeta_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type FormItemMeta_variance_fields {
  id: Float
}

"""enum for form item types"""
type FormItemType {
  type: String!
}

"""
aggregated selection of "FormItemType"
"""
type FormItemType_aggregate {
  aggregate: FormItemType_aggregate_fields
  nodes: [FormItemType!]!
}

"""
aggregate fields of "FormItemType"
"""
type FormItemType_aggregate_fields {
  count(columns: [FormItemType_select_column!], distinct: Boolean): Int!
  max: FormItemType_max_fields
  min: FormItemType_min_fields
}

"""
Boolean expression to filter rows from the table "FormItemType". All fields are combined with a logical 'AND'.
"""
input FormItemType_bool_exp {
  _and: [FormItemType_bool_exp!]
  _not: FormItemType_bool_exp
  _or: [FormItemType_bool_exp!]
  type: String_comparison_exp
}

"""
unique or primary key constraints on table "FormItemType"
"""
enum FormItemType_constraint {
  """
  unique or primary key constraint on columns "type"
  """
  FormItemType_pkey
}

enum FormItemType_enum {
  DATE
  DROPDOWN
  LINEAR_SCALE
  LONG
  MULTIPLE_CHOICE
  MULTIPLE_CHOICE_GRID
  PHONE_NUMBER
  RATING
  SECTION
  SHORT
  SINGLE_CHOICE
  SINGLE_CHOICE_GRID
  TEXT
}

"""
Boolean expression to compare columns of type "FormItemType_enum". All fields are combined with logical 'AND'.
"""
input FormItemType_enum_comparison_exp {
  _eq: FormItemType_enum
  _in: [FormItemType_enum!]
  _is_null: Boolean
  _neq: FormItemType_enum
  _nin: [FormItemType_enum!]
}

"""
input type for inserting data into table "FormItemType"
"""
input FormItemType_insert_input {
  type: String
}

"""aggregate max on columns"""
type FormItemType_max_fields {
  type: String
}

"""aggregate min on columns"""
type FormItemType_min_fields {
  type: String
}

"""
response of any mutation on the table "FormItemType"
"""
type FormItemType_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [FormItemType!]!
}

"""
on_conflict condition type for table "FormItemType"
"""
input FormItemType_on_conflict {
  constraint: FormItemType_constraint!
  update_columns: [FormItemType_update_column!]! = []
  where: FormItemType_bool_exp
}

"""Ordering options when selecting data from "FormItemType"."""
input FormItemType_order_by {
  type: order_by
}

"""primary key columns input for table: FormItemType"""
input FormItemType_pk_columns_input {
  type: String!
}

"""
select columns of table "FormItemType"
"""
enum FormItemType_select_column {
  """column name"""
  type
}

"""
input type for updating data in table "FormItemType"
"""
input FormItemType_set_input {
  type: String
}

"""
Streaming cursor of the table "FormItemType"
"""
input FormItemType_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: FormItemType_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input FormItemType_stream_cursor_value_input {
  type: String
}

"""
update columns of table "FormItemType"
"""
enum FormItemType_update_column {
  """column name"""
  type
}

input FormItemType_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: FormItemType_set_input
  """filter the rows which have to be updated"""
  where: FormItemType_bool_exp!
}

"""
aggregated selection of "FormItem"
"""
type FormItem_aggregate {
  aggregate: FormItem_aggregate_fields
  nodes: [FormItem!]!
}

input FormItem_aggregate_bool_exp {
  bool_and: FormItem_aggregate_bool_exp_bool_and
  bool_or: FormItem_aggregate_bool_exp_bool_or
  count: FormItem_aggregate_bool_exp_count
}

input FormItem_aggregate_bool_exp_bool_and {
  arguments: FormItem_select_column_FormItem_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: FormItem_bool_exp
  predicate: Boolean_comparison_exp!
}

input FormItem_aggregate_bool_exp_bool_or {
  arguments: FormItem_select_column_FormItem_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: FormItem_bool_exp
  predicate: Boolean_comparison_exp!
}

input FormItem_aggregate_bool_exp_count {
  arguments: [FormItem_select_column!]
  distinct: Boolean
  filter: FormItem_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "FormItem"
"""
type FormItem_aggregate_fields {
  avg: FormItem_avg_fields
  count(columns: [FormItem_select_column!], distinct: Boolean): Int!
  max: FormItem_max_fields
  min: FormItem_min_fields
  stddev: FormItem_stddev_fields
  stddev_pop: FormItem_stddev_pop_fields
  stddev_samp: FormItem_stddev_samp_fields
  sum: FormItem_sum_fields
  var_pop: FormItem_var_pop_fields
  var_samp: FormItem_var_samp_fields
  variance: FormItem_variance_fields
}

"""
order by aggregate values of table "FormItem"
"""
input FormItem_aggregate_order_by {
  avg: FormItem_avg_order_by
  count: order_by
  max: FormItem_max_order_by
  min: FormItem_min_order_by
  stddev: FormItem_stddev_order_by
  stddev_pop: FormItem_stddev_pop_order_by
  stddev_samp: FormItem_stddev_samp_order_by
  sum: FormItem_sum_order_by
  var_pop: FormItem_var_pop_order_by
  var_samp: FormItem_var_samp_order_by
  variance: FormItem_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input FormItem_append_input {
  image: jsonb
  items: jsonb
}

"""
input type for inserting array relation for remote table "FormItem"
"""
input FormItem_arr_rel_insert_input {
  data: [FormItem_insert_input!]!
  """upsert condition"""
  on_conflict: FormItem_on_conflict
}

"""aggregate avg on columns"""
type FormItem_avg_fields {
  order: Float
  section: Float
}

"""
order by avg() on columns of table "FormItem"
"""
input FormItem_avg_order_by {
  order: order_by
  section: order_by
}

"""
Boolean expression to filter rows from the table "FormItem". All fields are combined with a logical 'AND'.
"""
input FormItem_bool_exp {
  Answers: Answer_bool_exp
  Answers_aggregate: Answer_aggregate_bool_exp
  Form: Form_bool_exp
  _and: [FormItem_bool_exp!]
  _not: FormItem_bool_exp
  _or: [FormItem_bool_exp!]
  formId: String_comparison_exp
  id: String_comparison_exp
  image: jsonb_comparison_exp
  items: jsonb_comparison_exp
  name: String_comparison_exp
  order: Int_comparison_exp
  required: Boolean_comparison_exp
  section: Int_comparison_exp
  type: FormItemType_enum_comparison_exp
}

"""
unique or primary key constraints on table "FormItem"
"""
enum FormItem_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  FormItem_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input FormItem_delete_at_path_input {
  image: [String!]
  items: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input FormItem_delete_elem_input {
  image: Int
  items: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input FormItem_delete_key_input {
  image: String
  items: String
}

"""
input type for incrementing numeric columns in table "FormItem"
"""
input FormItem_inc_input {
  order: Int
  section: Int
}

"""
input type for inserting data into table "FormItem"
"""
input FormItem_insert_input {
  Answers: Answer_arr_rel_insert_input
  Form: Form_obj_rel_insert_input
  formId: String
  id: String
  image: jsonb
  items: jsonb
  name: String
  order: Int
  required: Boolean
  section: Int
  type: FormItemType_enum
}

"""aggregate max on columns"""
type FormItem_max_fields {
  formId: String
  id: String
  name: String
  order: Int
  section: Int
}

"""
order by max() on columns of table "FormItem"
"""
input FormItem_max_order_by {
  formId: order_by
  id: order_by
  name: order_by
  order: order_by
  section: order_by
}

"""aggregate min on columns"""
type FormItem_min_fields {
  formId: String
  id: String
  name: String
  order: Int
  section: Int
}

"""
order by min() on columns of table "FormItem"
"""
input FormItem_min_order_by {
  formId: order_by
  id: order_by
  name: order_by
  order: order_by
  section: order_by
}

"""
response of any mutation on the table "FormItem"
"""
type FormItem_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [FormItem!]!
}

"""
input type for inserting object relation for remote table "FormItem"
"""
input FormItem_obj_rel_insert_input {
  data: FormItem_insert_input!
  """upsert condition"""
  on_conflict: FormItem_on_conflict
}

"""
on_conflict condition type for table "FormItem"
"""
input FormItem_on_conflict {
  constraint: FormItem_constraint!
  update_columns: [FormItem_update_column!]! = []
  where: FormItem_bool_exp
}

"""Ordering options when selecting data from "FormItem"."""
input FormItem_order_by {
  Answers_aggregate: Answer_aggregate_order_by
  Form: Form_order_by
  formId: order_by
  id: order_by
  image: order_by
  items: order_by
  name: order_by
  order: order_by
  required: order_by
  section: order_by
  type: order_by
}

"""primary key columns input for table: FormItem"""
input FormItem_pk_columns_input {
  id: String!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input FormItem_prepend_input {
  image: jsonb
  items: jsonb
}

"""
select columns of table "FormItem"
"""
enum FormItem_select_column {
  """column name"""
  formId
  """column name"""
  id
  """column name"""
  image
  """column name"""
  items
  """column name"""
  name
  """column name"""
  order
  """column name"""
  required
  """column name"""
  section
  """column name"""
  type
}

"""
select "FormItem_aggregate_bool_exp_bool_and_arguments_columns" columns of table "FormItem"
"""
enum FormItem_select_column_FormItem_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  required
}

"""
select "FormItem_aggregate_bool_exp_bool_or_arguments_columns" columns of table "FormItem"
"""
enum FormItem_select_column_FormItem_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  required
}

"""
input type for updating data in table "FormItem"
"""
input FormItem_set_input {
  formId: String
  id: String
  image: jsonb
  items: jsonb
  name: String
  order: Int
  required: Boolean
  section: Int
  type: FormItemType_enum
}

"""aggregate stddev on columns"""
type FormItem_stddev_fields {
  order: Float
  section: Float
}

"""
order by stddev() on columns of table "FormItem"
"""
input FormItem_stddev_order_by {
  order: order_by
  section: order_by
}

"""aggregate stddev_pop on columns"""
type FormItem_stddev_pop_fields {
  order: Float
  section: Float
}

"""
order by stddev_pop() on columns of table "FormItem"
"""
input FormItem_stddev_pop_order_by {
  order: order_by
  section: order_by
}

"""aggregate stddev_samp on columns"""
type FormItem_stddev_samp_fields {
  order: Float
  section: Float
}

"""
order by stddev_samp() on columns of table "FormItem"
"""
input FormItem_stddev_samp_order_by {
  order: order_by
  section: order_by
}

"""
Streaming cursor of the table "FormItem"
"""
input FormItem_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: FormItem_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input FormItem_stream_cursor_value_input {
  formId: String
  id: String
  image: jsonb
  items: jsonb
  name: String
  order: Int
  required: Boolean
  section: Int
  type: FormItemType_enum
}

"""aggregate sum on columns"""
type FormItem_sum_fields {
  order: Int
  section: Int
}

"""
order by sum() on columns of table "FormItem"
"""
input FormItem_sum_order_by {
  order: order_by
  section: order_by
}

"""
update columns of table "FormItem"
"""
enum FormItem_update_column {
  """column name"""
  formId
  """column name"""
  id
  """column name"""
  image
  """column name"""
  items
  """column name"""
  name
  """column name"""
  order
  """column name"""
  required
  """column name"""
  section
  """column name"""
  type
}

input FormItem_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: FormItem_append_input
  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: FormItem_delete_at_path_input
  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: FormItem_delete_elem_input
  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: FormItem_delete_key_input
  """increments the numeric columns with given value of the filtered values"""
  _inc: FormItem_inc_input
  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: FormItem_prepend_input
  """sets the columns of the filtered rows to the given values"""
  _set: FormItem_set_input
  """filter the rows which have to be updated"""
  where: FormItem_bool_exp!
}

"""aggregate var_pop on columns"""
type FormItem_var_pop_fields {
  order: Float
  section: Float
}

"""
order by var_pop() on columns of table "FormItem"
"""
input FormItem_var_pop_order_by {
  order: order_by
  section: order_by
}

"""aggregate var_samp on columns"""
type FormItem_var_samp_fields {
  order: Float
  section: Float
}

"""
order by var_samp() on columns of table "FormItem"
"""
input FormItem_var_samp_order_by {
  order: order_by
  section: order_by
}

"""aggregate variance on columns"""
type FormItem_variance_fields {
  order: Float
  section: Float
}

"""
order by variance() on columns of table "FormItem"
"""
input FormItem_variance_order_by {
  order: order_by
  section: order_by
}

"""
aggregated selection of "Form"
"""
type Form_aggregate {
  aggregate: Form_aggregate_fields
  nodes: [Form!]!
}

input Form_aggregate_bool_exp {
  bool_and: Form_aggregate_bool_exp_bool_and
  bool_or: Form_aggregate_bool_exp_bool_or
  count: Form_aggregate_bool_exp_count
}

input Form_aggregate_bool_exp_bool_and {
  arguments: Form_select_column_Form_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: Form_bool_exp
  predicate: Boolean_comparison_exp!
}

input Form_aggregate_bool_exp_bool_or {
  arguments: Form_select_column_Form_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: Form_bool_exp
  predicate: Boolean_comparison_exp!
}

input Form_aggregate_bool_exp_count {
  arguments: [Form_select_column!]
  distinct: Boolean
  filter: Form_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "Form"
"""
type Form_aggregate_fields {
  avg: Form_avg_fields
  count(columns: [Form_select_column!], distinct: Boolean): Int!
  max: Form_max_fields
  min: Form_min_fields
  stddev: Form_stddev_fields
  stddev_pop: Form_stddev_pop_fields
  stddev_samp: Form_stddev_samp_fields
  sum: Form_sum_fields
  var_pop: Form_var_pop_fields
  var_samp: Form_var_samp_fields
  variance: Form_variance_fields
}

"""
order by aggregate values of table "Form"
"""
input Form_aggregate_order_by {
  avg: Form_avg_order_by
  count: order_by
  max: Form_max_order_by
  min: Form_min_order_by
  stddev: Form_stddev_order_by
  stddev_pop: Form_stddev_pop_order_by
  stddev_samp: Form_stddev_samp_order_by
  sum: Form_sum_order_by
  var_pop: Form_var_pop_order_by
  var_samp: Form_var_samp_order_by
  variance: Form_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input Form_append_input {
  style: jsonb
}

"""
input type for inserting array relation for remote table "Form"
"""
input Form_arr_rel_insert_input {
  data: [Form_insert_input!]!
  """upsert condition"""
  on_conflict: Form_on_conflict
}

"""aggregate avg on columns"""
type Form_avg_fields {
  order: Float
  responses: Float
}

"""
order by avg() on columns of table "Form"
"""
input Form_avg_order_by {
  order: order_by
  responses: order_by
}

"""
Boolean expression to filter rows from the table "Form". All fields are combined with a logical 'AND'.
"""
input Form_bool_exp {
  Folder: Folder_bool_exp
  FormItems: FormItem_bool_exp
  FormItems_aggregate: FormItem_aggregate_bool_exp
  _and: [Form_bool_exp!]
  _not: Form_bool_exp
  _or: [Form_bool_exp!]
  createdAt: timestamp_comparison_exp
  favorite: Boolean_comparison_exp
  folderId: String_comparison_exp
  id: String_comparison_exp
  name: String_comparison_exp
  order: Int_comparison_exp
  ownerId: String_comparison_exp
  responses: Int_comparison_exp
  style: jsonb_comparison_exp
  thumbnail: String_comparison_exp
  updatedAt: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "Form"
"""
enum Form_constraint {
  """
  unique or primary key constraint on columns "ownerId", "name"
  """
  Form_ownerId_name_key
  """
  unique or primary key constraint on columns "id"
  """
  Form_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input Form_delete_at_path_input {
  style: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input Form_delete_elem_input {
  style: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input Form_delete_key_input {
  style: String
}

"""
input type for incrementing numeric columns in table "Form"
"""
input Form_inc_input {
  order: Int
  responses: Int
}

"""
input type for inserting data into table "Form"
"""
input Form_insert_input {
  Folder: Folder_obj_rel_insert_input
  FormItems: FormItem_arr_rel_insert_input
  createdAt: timestamp
  favorite: Boolean
  folderId: String
  id: String
  name: String
  order: Int
  ownerId: String
  responses: Int
  style: jsonb
  thumbnail: String
  updatedAt: timestamp
}

"""aggregate max on columns"""
type Form_max_fields {
  createdAt: timestamp
  folderId: String
  id: String
  name: String
  order: Int
  ownerId: String
  responses: Int
  thumbnail: String
  updatedAt: timestamp
}

"""
order by max() on columns of table "Form"
"""
input Form_max_order_by {
  createdAt: order_by
  folderId: order_by
  id: order_by
  name: order_by
  order: order_by
  ownerId: order_by
  responses: order_by
  thumbnail: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type Form_min_fields {
  createdAt: timestamp
  folderId: String
  id: String
  name: String
  order: Int
  ownerId: String
  responses: Int
  thumbnail: String
  updatedAt: timestamp
}

"""
order by min() on columns of table "Form"
"""
input Form_min_order_by {
  createdAt: order_by
  folderId: order_by
  id: order_by
  name: order_by
  order: order_by
  ownerId: order_by
  responses: order_by
  thumbnail: order_by
  updatedAt: order_by
}

"""
response of any mutation on the table "Form"
"""
type Form_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [Form!]!
}

"""
input type for inserting object relation for remote table "Form"
"""
input Form_obj_rel_insert_input {
  data: Form_insert_input!
  """upsert condition"""
  on_conflict: Form_on_conflict
}

"""
on_conflict condition type for table "Form"
"""
input Form_on_conflict {
  constraint: Form_constraint!
  update_columns: [Form_update_column!]! = []
  where: Form_bool_exp
}

"""Ordering options when selecting data from "Form"."""
input Form_order_by {
  Folder: Folder_order_by
  FormItems_aggregate: FormItem_aggregate_order_by
  createdAt: order_by
  favorite: order_by
  folderId: order_by
  id: order_by
  name: order_by
  order: order_by
  ownerId: order_by
  responses: order_by
  style: order_by
  thumbnail: order_by
  updatedAt: order_by
}

"""primary key columns input for table: Form"""
input Form_pk_columns_input {
  id: String!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input Form_prepend_input {
  style: jsonb
}

"""
select columns of table "Form"
"""
enum Form_select_column {
  """column name"""
  createdAt
  """column name"""
  favorite
  """column name"""
  folderId
  """column name"""
  id
  """column name"""
  name
  """column name"""
  order
  """column name"""
  ownerId
  """column name"""
  responses
  """column name"""
  style
  """column name"""
  thumbnail
  """column name"""
  updatedAt
}

"""
select "Form_aggregate_bool_exp_bool_and_arguments_columns" columns of table "Form"
"""
enum Form_select_column_Form_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  favorite
}

"""
select "Form_aggregate_bool_exp_bool_or_arguments_columns" columns of table "Form"
"""
enum Form_select_column_Form_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  favorite
}

"""
input type for updating data in table "Form"
"""
input Form_set_input {
  createdAt: timestamp
  favorite: Boolean
  folderId: String
  id: String
  name: String
  order: Int
  ownerId: String
  responses: Int
  style: jsonb
  thumbnail: String
  updatedAt: timestamp
}

"""aggregate stddev on columns"""
type Form_stddev_fields {
  order: Float
  responses: Float
}

"""
order by stddev() on columns of table "Form"
"""
input Form_stddev_order_by {
  order: order_by
  responses: order_by
}

"""aggregate stddev_pop on columns"""
type Form_stddev_pop_fields {
  order: Float
  responses: Float
}

"""
order by stddev_pop() on columns of table "Form"
"""
input Form_stddev_pop_order_by {
  order: order_by
  responses: order_by
}

"""aggregate stddev_samp on columns"""
type Form_stddev_samp_fields {
  order: Float
  responses: Float
}

"""
order by stddev_samp() on columns of table "Form"
"""
input Form_stddev_samp_order_by {
  order: order_by
  responses: order_by
}

"""
Streaming cursor of the table "Form"
"""
input Form_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Form_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Form_stream_cursor_value_input {
  createdAt: timestamp
  favorite: Boolean
  folderId: String
  id: String
  name: String
  order: Int
  ownerId: String
  responses: Int
  style: jsonb
  thumbnail: String
  updatedAt: timestamp
}

"""aggregate sum on columns"""
type Form_sum_fields {
  order: Int
  responses: Int
}

"""
order by sum() on columns of table "Form"
"""
input Form_sum_order_by {
  order: order_by
  responses: order_by
}

"""
update columns of table "Form"
"""
enum Form_update_column {
  """column name"""
  createdAt
  """column name"""
  favorite
  """column name"""
  folderId
  """column name"""
  id
  """column name"""
  name
  """column name"""
  order
  """column name"""
  ownerId
  """column name"""
  responses
  """column name"""
  style
  """column name"""
  thumbnail
  """column name"""
  updatedAt
}

input Form_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: Form_append_input
  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: Form_delete_at_path_input
  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: Form_delete_elem_input
  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: Form_delete_key_input
  """increments the numeric columns with given value of the filtered values"""
  _inc: Form_inc_input
  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: Form_prepend_input
  """sets the columns of the filtered rows to the given values"""
  _set: Form_set_input
  """filter the rows which have to be updated"""
  where: Form_bool_exp!
}

"""aggregate var_pop on columns"""
type Form_var_pop_fields {
  order: Float
  responses: Float
}

"""
order by var_pop() on columns of table "Form"
"""
input Form_var_pop_order_by {
  order: order_by
  responses: order_by
}

"""aggregate var_samp on columns"""
type Form_var_samp_fields {
  order: Float
  responses: Float
}

"""
order by var_samp() on columns of table "Form"
"""
input Form_var_samp_order_by {
  order: order_by
  responses: order_by
}

"""aggregate variance on columns"""
type Form_variance_fields {
  order: Float
  responses: Float
}

"""
order by variance() on columns of table "Form"
"""
input Form_variance_order_by {
  order: order_by
  responses: order_by
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""user notifications"""
type Notification {
  """An object relationship"""
  Form: Form
  createdAt: timestamp!
  description: String
  formId: String
  id: Int!
  ownerId: String
  read: Boolean!
  relatedId: String
}

"""
aggregated selection of "Notification"
"""
type Notification_aggregate {
  aggregate: Notification_aggregate_fields
  nodes: [Notification!]!
}

"""
aggregate fields of "Notification"
"""
type Notification_aggregate_fields {
  avg: Notification_avg_fields
  count(columns: [Notification_select_column!], distinct: Boolean): Int!
  max: Notification_max_fields
  min: Notification_min_fields
  stddev: Notification_stddev_fields
  stddev_pop: Notification_stddev_pop_fields
  stddev_samp: Notification_stddev_samp_fields
  sum: Notification_sum_fields
  var_pop: Notification_var_pop_fields
  var_samp: Notification_var_samp_fields
  variance: Notification_variance_fields
}

"""aggregate avg on columns"""
type Notification_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "Notification". All fields are combined with a logical 'AND'.
"""
input Notification_bool_exp {
  Form: Form_bool_exp
  _and: [Notification_bool_exp!]
  _not: Notification_bool_exp
  _or: [Notification_bool_exp!]
  createdAt: timestamp_comparison_exp
  description: String_comparison_exp
  formId: String_comparison_exp
  id: Int_comparison_exp
  ownerId: String_comparison_exp
  read: Boolean_comparison_exp
  relatedId: String_comparison_exp
}

"""
unique or primary key constraints on table "Notification"
"""
enum Notification_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  Notification_pkey
}

"""
input type for incrementing numeric columns in table "Notification"
"""
input Notification_inc_input {
  id: Int
}

"""
input type for inserting data into table "Notification"
"""
input Notification_insert_input {
  Form: Form_obj_rel_insert_input
  createdAt: timestamp
  description: String
  formId: String
  id: Int
  ownerId: String
  read: Boolean
  relatedId: String
}

"""aggregate max on columns"""
type Notification_max_fields {
  createdAt: timestamp
  description: String
  formId: String
  id: Int
  ownerId: String
  relatedId: String
}

"""aggregate min on columns"""
type Notification_min_fields {
  createdAt: timestamp
  description: String
  formId: String
  id: Int
  ownerId: String
  relatedId: String
}

"""
response of any mutation on the table "Notification"
"""
type Notification_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [Notification!]!
}

"""
on_conflict condition type for table "Notification"
"""
input Notification_on_conflict {
  constraint: Notification_constraint!
  update_columns: [Notification_update_column!]! = []
  where: Notification_bool_exp
}

"""Ordering options when selecting data from "Notification"."""
input Notification_order_by {
  Form: Form_order_by
  createdAt: order_by
  description: order_by
  formId: order_by
  id: order_by
  ownerId: order_by
  read: order_by
  relatedId: order_by
}

"""primary key columns input for table: Notification"""
input Notification_pk_columns_input {
  id: Int!
}

"""
select columns of table "Notification"
"""
enum Notification_select_column {
  """column name"""
  createdAt
  """column name"""
  description
  """column name"""
  formId
  """column name"""
  id
  """column name"""
  ownerId
  """column name"""
  read
  """column name"""
  relatedId
}

"""
input type for updating data in table "Notification"
"""
input Notification_set_input {
  createdAt: timestamp
  description: String
  formId: String
  id: Int
  ownerId: String
  read: Boolean
  relatedId: String
}

"""aggregate stddev on columns"""
type Notification_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type Notification_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type Notification_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "Notification"
"""
input Notification_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Notification_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Notification_stream_cursor_value_input {
  createdAt: timestamp
  description: String
  formId: String
  id: Int
  ownerId: String
  read: Boolean
  relatedId: String
}

"""aggregate sum on columns"""
type Notification_sum_fields {
  id: Int
}

"""
update columns of table "Notification"
"""
enum Notification_update_column {
  """column name"""
  createdAt
  """column name"""
  description
  """column name"""
  formId
  """column name"""
  id
  """column name"""
  ownerId
  """column name"""
  read
  """column name"""
  relatedId
}

input Notification_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: Notification_inc_input
  """sets the columns of the filtered rows to the given values"""
  _set: Notification_set_input
  """filter the rows which have to be updated"""
  where: Notification_bool_exp!
}

"""aggregate var_pop on columns"""
type Notification_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type Notification_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type Notification_variance_fields {
  id: Float
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]
  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean
  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String
  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]
  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String
  """does the column NOT match the given pattern"""
  _nlike: String
  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String
  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String
  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String
  """does the column match the given SQL regular expression"""
  _similar: String
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC
  """descending ordering of the cursor"""
  DESC
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp
  """is the column contained in the given json value"""
  _contained_in: jsonb
  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb
  """does the string exist as a top-level key in the column"""
  _has_key: String
  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]
  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "Answer"
  """
  delete_Answer(
    """filter the rows which have to be deleted"""
    where: Answer_bool_exp!
  ): Answer_mutation_response
  """
  delete single row from the table: "Answer"
  """
  delete_Answer_by_pk(id: String!): Answer
  """
  delete data from the table: "Folder"
  """
  delete_Folder(
    """filter the rows which have to be deleted"""
    where: Folder_bool_exp!
  ): Folder_mutation_response
  """
  delete single row from the table: "Folder"
  """
  delete_Folder_by_pk(id: String!): Folder
  """
  delete data from the table: "Form"
  """
  delete_Form(
    """filter the rows which have to be deleted"""
    where: Form_bool_exp!
  ): Form_mutation_response
  """
  delete data from the table: "FormItem"
  """
  delete_FormItem(
    """filter the rows which have to be deleted"""
    where: FormItem_bool_exp!
  ): FormItem_mutation_response
  """
  delete data from the table: "FormItemMeta"
  """
  delete_FormItemMeta(
    """filter the rows which have to be deleted"""
    where: FormItemMeta_bool_exp!
  ): FormItemMeta_mutation_response
  """
  delete single row from the table: "FormItemMeta"
  """
  delete_FormItemMeta_by_pk(id: Int!): FormItemMeta
  """
  delete data from the table: "FormItemType"
  """
  delete_FormItemType(
    """filter the rows which have to be deleted"""
    where: FormItemType_bool_exp!
  ): FormItemType_mutation_response
  """
  delete single row from the table: "FormItemType"
  """
  delete_FormItemType_by_pk(type: String!): FormItemType
  """
  delete single row from the table: "FormItem"
  """
  delete_FormItem_by_pk(id: String!): FormItem
  """
  delete single row from the table: "Form"
  """
  delete_Form_by_pk(id: String!): Form
  """
  delete data from the table: "Notification"
  """
  delete_Notification(
    """filter the rows which have to be deleted"""
    where: Notification_bool_exp!
  ): Notification_mutation_response
  """
  delete single row from the table: "Notification"
  """
  delete_Notification_by_pk(id: Int!): Notification
  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response
  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: String!): users
  """
  insert data into the table: "Answer"
  """
  insert_Answer(
    """the rows to be inserted"""
    objects: [Answer_insert_input!]!
    """upsert condition"""
    on_conflict: Answer_on_conflict
  ): Answer_mutation_response
  """
  insert a single row into the table: "Answer"
  """
  insert_Answer_one(
    """the row to be inserted"""
    object: Answer_insert_input!
    """upsert condition"""
    on_conflict: Answer_on_conflict
  ): Answer
  """
  insert data into the table: "Folder"
  """
  insert_Folder(
    """the rows to be inserted"""
    objects: [Folder_insert_input!]!
    """upsert condition"""
    on_conflict: Folder_on_conflict
  ): Folder_mutation_response
  """
  insert a single row into the table: "Folder"
  """
  insert_Folder_one(
    """the row to be inserted"""
    object: Folder_insert_input!
    """upsert condition"""
    on_conflict: Folder_on_conflict
  ): Folder
  """
  insert data into the table: "Form"
  """
  insert_Form(
    """the rows to be inserted"""
    objects: [Form_insert_input!]!
    """upsert condition"""
    on_conflict: Form_on_conflict
  ): Form_mutation_response
  """
  insert data into the table: "FormItem"
  """
  insert_FormItem(
    """the rows to be inserted"""
    objects: [FormItem_insert_input!]!
    """upsert condition"""
    on_conflict: FormItem_on_conflict
  ): FormItem_mutation_response
  """
  insert data into the table: "FormItemMeta"
  """
  insert_FormItemMeta(
    """the rows to be inserted"""
    objects: [FormItemMeta_insert_input!]!
    """upsert condition"""
    on_conflict: FormItemMeta_on_conflict
  ): FormItemMeta_mutation_response
  """
  insert a single row into the table: "FormItemMeta"
  """
  insert_FormItemMeta_one(
    """the row to be inserted"""
    object: FormItemMeta_insert_input!
    """upsert condition"""
    on_conflict: FormItemMeta_on_conflict
  ): FormItemMeta
  """
  insert data into the table: "FormItemType"
  """
  insert_FormItemType(
    """the rows to be inserted"""
    objects: [FormItemType_insert_input!]!
    """upsert condition"""
    on_conflict: FormItemType_on_conflict
  ): FormItemType_mutation_response
  """
  insert a single row into the table: "FormItemType"
  """
  insert_FormItemType_one(
    """the row to be inserted"""
    object: FormItemType_insert_input!
    """upsert condition"""
    on_conflict: FormItemType_on_conflict
  ): FormItemType
  """
  insert a single row into the table: "FormItem"
  """
  insert_FormItem_one(
    """the row to be inserted"""
    object: FormItem_insert_input!
    """upsert condition"""
    on_conflict: FormItem_on_conflict
  ): FormItem
  """
  insert a single row into the table: "Form"
  """
  insert_Form_one(
    """the row to be inserted"""
    object: Form_insert_input!
    """upsert condition"""
    on_conflict: Form_on_conflict
  ): Form
  """
  insert data into the table: "Notification"
  """
  insert_Notification(
    """the rows to be inserted"""
    objects: [Notification_insert_input!]!
    """upsert condition"""
    on_conflict: Notification_on_conflict
  ): Notification_mutation_response
  """
  insert a single row into the table: "Notification"
  """
  insert_Notification_one(
    """the row to be inserted"""
    object: Notification_insert_input!
    """upsert condition"""
    on_conflict: Notification_on_conflict
  ): Notification
  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!
    """upsert condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response
  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!
    """upsert condition"""
    on_conflict: users_on_conflict
  ): users
  """
  update data of the table: "Answer"
  """
  update_Answer(
    """sets the columns of the filtered rows to the given values"""
    _set: Answer_set_input
    """filter the rows which have to be updated"""
    where: Answer_bool_exp!
  ): Answer_mutation_response
  """
  update single row of the table: "Answer"
  """
  update_Answer_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: Answer_set_input
    pk_columns: Answer_pk_columns_input!
  ): Answer
  """
  update multiples rows of table: "Answer"
  """
  update_Answer_many(
    """updates to execute, in order"""
    updates: [Answer_updates!]!
  ): [Answer_mutation_response]
  """
  update data of the table: "Folder"
  """
  update_Folder(
    """sets the columns of the filtered rows to the given values"""
    _set: Folder_set_input
    """filter the rows which have to be updated"""
    where: Folder_bool_exp!
  ): Folder_mutation_response
  """
  update single row of the table: "Folder"
  """
  update_Folder_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: Folder_set_input
    pk_columns: Folder_pk_columns_input!
  ): Folder
  """
  update multiples rows of table: "Folder"
  """
  update_Folder_many(
    """updates to execute, in order"""
    updates: [Folder_updates!]!
  ): [Folder_mutation_response]
  """
  update data of the table: "Form"
  """
  update_Form(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: Form_append_input
    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: Form_delete_at_path_input
    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: Form_delete_elem_input
    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: Form_delete_key_input
    """increments the numeric columns with given value of the filtered values"""
    _inc: Form_inc_input
    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: Form_prepend_input
    """sets the columns of the filtered rows to the given values"""
    _set: Form_set_input
    """filter the rows which have to be updated"""
    where: Form_bool_exp!
  ): Form_mutation_response
  """
  update data of the table: "FormItem"
  """
  update_FormItem(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: FormItem_append_input
    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: FormItem_delete_at_path_input
    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: FormItem_delete_elem_input
    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: FormItem_delete_key_input
    """increments the numeric columns with given value of the filtered values"""
    _inc: FormItem_inc_input
    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: FormItem_prepend_input
    """sets the columns of the filtered rows to the given values"""
    _set: FormItem_set_input
    """filter the rows which have to be updated"""
    where: FormItem_bool_exp!
  ): FormItem_mutation_response
  """
  update data of the table: "FormItemMeta"
  """
  update_FormItemMeta(
    """increments the numeric columns with given value of the filtered values"""
    _inc: FormItemMeta_inc_input
    """sets the columns of the filtered rows to the given values"""
    _set: FormItemMeta_set_input
    """filter the rows which have to be updated"""
    where: FormItemMeta_bool_exp!
  ): FormItemMeta_mutation_response
  """
  update single row of the table: "FormItemMeta"
  """
  update_FormItemMeta_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: FormItemMeta_inc_input
    """sets the columns of the filtered rows to the given values"""
    _set: FormItemMeta_set_input
    pk_columns: FormItemMeta_pk_columns_input!
  ): FormItemMeta
  """
  update multiples rows of table: "FormItemMeta"
  """
  update_FormItemMeta_many(
    """updates to execute, in order"""
    updates: [FormItemMeta_updates!]!
  ): [FormItemMeta_mutation_response]
  """
  update data of the table: "FormItemType"
  """
  update_FormItemType(
    """sets the columns of the filtered rows to the given values"""
    _set: FormItemType_set_input
    """filter the rows which have to be updated"""
    where: FormItemType_bool_exp!
  ): FormItemType_mutation_response
  """
  update single row of the table: "FormItemType"
  """
  update_FormItemType_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: FormItemType_set_input
    pk_columns: FormItemType_pk_columns_input!
  ): FormItemType
  """
  update multiples rows of table: "FormItemType"
  """
  update_FormItemType_many(
    """updates to execute, in order"""
    updates: [FormItemType_updates!]!
  ): [FormItemType_mutation_response]
  """
  update single row of the table: "FormItem"
  """
  update_FormItem_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: FormItem_append_input
    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: FormItem_delete_at_path_input
    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: FormItem_delete_elem_input
    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: FormItem_delete_key_input
    """increments the numeric columns with given value of the filtered values"""
    _inc: FormItem_inc_input
    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: FormItem_prepend_input
    """sets the columns of the filtered rows to the given values"""
    _set: FormItem_set_input
    pk_columns: FormItem_pk_columns_input!
  ): FormItem
  """
  update multiples rows of table: "FormItem"
  """
  update_FormItem_many(
    """updates to execute, in order"""
    updates: [FormItem_updates!]!
  ): [FormItem_mutation_response]
  """
  update single row of the table: "Form"
  """
  update_Form_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: Form_append_input
    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: Form_delete_at_path_input
    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: Form_delete_elem_input
    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: Form_delete_key_input
    """increments the numeric columns with given value of the filtered values"""
    _inc: Form_inc_input
    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: Form_prepend_input
    """sets the columns of the filtered rows to the given values"""
    _set: Form_set_input
    pk_columns: Form_pk_columns_input!
  ): Form
  """
  update multiples rows of table: "Form"
  """
  update_Form_many(
    """updates to execute, in order"""
    updates: [Form_updates!]!
  ): [Form_mutation_response]
  """
  update data of the table: "Notification"
  """
  update_Notification(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Notification_inc_input
    """sets the columns of the filtered rows to the given values"""
    _set: Notification_set_input
    """filter the rows which have to be updated"""
    where: Notification_bool_exp!
  ): Notification_mutation_response
  """
  update single row of the table: "Notification"
  """
  update_Notification_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Notification_inc_input
    """sets the columns of the filtered rows to the given values"""
    _set: Notification_set_input
    pk_columns: Notification_pk_columns_input!
  ): Notification
  """
  update multiples rows of table: "Notification"
  """
  update_Notification_many(
    """updates to execute, in order"""
    updates: [Notification_updates!]!
  ): [Notification_mutation_response]
  """
  update data of the table: "users"
  """
  update_users(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response
  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
  """
  update multiples rows of table: "users"
  """
  update_users_many(
    """updates to execute, in order"""
    updates: [users_updates!]!
  ): [users_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc
  """in ascending order, nulls first"""
  asc_nulls_first
  """in ascending order, nulls last"""
  asc_nulls_last
  """in descending order, nulls first"""
  desc
  """in descending order, nulls first"""
  desc_nulls_first
  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "Answer"
  """
  Answer(
    """distinct select on columns"""
    distinct_on: [Answer_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Answer_order_by!]
    """filter the rows returned"""
    where: Answer_bool_exp
  ): [Answer!]!
  """
  fetch aggregated fields from the table: "Answer"
  """
  Answer_aggregate(
    """distinct select on columns"""
    distinct_on: [Answer_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Answer_order_by!]
    """filter the rows returned"""
    where: Answer_bool_exp
  ): Answer_aggregate!
  """fetch data from the table: "Answer" using primary key columns"""
  Answer_by_pk(id: String!): Answer
  """
  fetch data from the table: "Folder"
  """
  Folder(
    """distinct select on columns"""
    distinct_on: [Folder_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Folder_order_by!]
    """filter the rows returned"""
    where: Folder_bool_exp
  ): [Folder!]!
  """
  fetch aggregated fields from the table: "Folder"
  """
  Folder_aggregate(
    """distinct select on columns"""
    distinct_on: [Folder_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Folder_order_by!]
    """filter the rows returned"""
    where: Folder_bool_exp
  ): Folder_aggregate!
  """fetch data from the table: "Folder" using primary key columns"""
  Folder_by_pk(id: String!): Folder
  """
  fetch data from the table: "Form"
  """
  Form(
    """distinct select on columns"""
    distinct_on: [Form_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Form_order_by!]
    """filter the rows returned"""
    where: Form_bool_exp
  ): [Form!]!
  """
  fetch data from the table: "FormItem"
  """
  FormItem(
    """distinct select on columns"""
    distinct_on: [FormItem_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FormItem_order_by!]
    """filter the rows returned"""
    where: FormItem_bool_exp
  ): [FormItem!]!
  """
  fetch data from the table: "FormItemMeta"
  """
  FormItemMeta(
    """distinct select on columns"""
    distinct_on: [FormItemMeta_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FormItemMeta_order_by!]
    """filter the rows returned"""
    where: FormItemMeta_bool_exp
  ): [FormItemMeta!]!
  """
  fetch aggregated fields from the table: "FormItemMeta"
  """
  FormItemMeta_aggregate(
    """distinct select on columns"""
    distinct_on: [FormItemMeta_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FormItemMeta_order_by!]
    """filter the rows returned"""
    where: FormItemMeta_bool_exp
  ): FormItemMeta_aggregate!
  """fetch data from the table: "FormItemMeta" using primary key columns"""
  FormItemMeta_by_pk(id: Int!): FormItemMeta
  """
  fetch data from the table: "FormItemType"
  """
  FormItemType(
    """distinct select on columns"""
    distinct_on: [FormItemType_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FormItemType_order_by!]
    """filter the rows returned"""
    where: FormItemType_bool_exp
  ): [FormItemType!]!
  """
  fetch aggregated fields from the table: "FormItemType"
  """
  FormItemType_aggregate(
    """distinct select on columns"""
    distinct_on: [FormItemType_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FormItemType_order_by!]
    """filter the rows returned"""
    where: FormItemType_bool_exp
  ): FormItemType_aggregate!
  """fetch data from the table: "FormItemType" using primary key columns"""
  FormItemType_by_pk(type: String!): FormItemType
  """
  fetch aggregated fields from the table: "FormItem"
  """
  FormItem_aggregate(
    """distinct select on columns"""
    distinct_on: [FormItem_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FormItem_order_by!]
    """filter the rows returned"""
    where: FormItem_bool_exp
  ): FormItem_aggregate!
  """fetch data from the table: "FormItem" using primary key columns"""
  FormItem_by_pk(id: String!): FormItem
  """
  fetch aggregated fields from the table: "Form"
  """
  Form_aggregate(
    """distinct select on columns"""
    distinct_on: [Form_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Form_order_by!]
    """filter the rows returned"""
    where: Form_bool_exp
  ): Form_aggregate!
  """fetch data from the table: "Form" using primary key columns"""
  Form_by_pk(id: String!): Form
  """
  fetch data from the table: "Notification"
  """
  Notification(
    """distinct select on columns"""
    distinct_on: [Notification_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Notification_order_by!]
    """filter the rows returned"""
    where: Notification_bool_exp
  ): [Notification!]!
  """
  fetch aggregated fields from the table: "Notification"
  """
  Notification_aggregate(
    """distinct select on columns"""
    distinct_on: [Notification_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Notification_order_by!]
    """filter the rows returned"""
    where: Notification_bool_exp
  ): Notification_aggregate!
  """fetch data from the table: "Notification" using primary key columns"""
  Notification_by_pk(id: Int!): Notification
  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [users_order_by!]
    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!
  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [users_order_by!]
    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!
  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: String!): users
}

type subscription_root {
  """
  fetch data from the table: "Answer"
  """
  Answer(
    """distinct select on columns"""
    distinct_on: [Answer_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Answer_order_by!]
    """filter the rows returned"""
    where: Answer_bool_exp
  ): [Answer!]!
  """
  fetch aggregated fields from the table: "Answer"
  """
  Answer_aggregate(
    """distinct select on columns"""
    distinct_on: [Answer_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Answer_order_by!]
    """filter the rows returned"""
    where: Answer_bool_exp
  ): Answer_aggregate!
  """fetch data from the table: "Answer" using primary key columns"""
  Answer_by_pk(id: String!): Answer
  """
  fetch data from the table in a streaming manner: "Answer"
  """
  Answer_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [Answer_stream_cursor_input]!
    """filter the rows returned"""
    where: Answer_bool_exp
  ): [Answer!]!
  """
  fetch data from the table: "Folder"
  """
  Folder(
    """distinct select on columns"""
    distinct_on: [Folder_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Folder_order_by!]
    """filter the rows returned"""
    where: Folder_bool_exp
  ): [Folder!]!
  """
  fetch aggregated fields from the table: "Folder"
  """
  Folder_aggregate(
    """distinct select on columns"""
    distinct_on: [Folder_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Folder_order_by!]
    """filter the rows returned"""
    where: Folder_bool_exp
  ): Folder_aggregate!
  """fetch data from the table: "Folder" using primary key columns"""
  Folder_by_pk(id: String!): Folder
  """
  fetch data from the table in a streaming manner: "Folder"
  """
  Folder_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [Folder_stream_cursor_input]!
    """filter the rows returned"""
    where: Folder_bool_exp
  ): [Folder!]!
  """
  fetch data from the table: "Form"
  """
  Form(
    """distinct select on columns"""
    distinct_on: [Form_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Form_order_by!]
    """filter the rows returned"""
    where: Form_bool_exp
  ): [Form!]!
  """
  fetch data from the table: "FormItem"
  """
  FormItem(
    """distinct select on columns"""
    distinct_on: [FormItem_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FormItem_order_by!]
    """filter the rows returned"""
    where: FormItem_bool_exp
  ): [FormItem!]!
  """
  fetch data from the table: "FormItemMeta"
  """
  FormItemMeta(
    """distinct select on columns"""
    distinct_on: [FormItemMeta_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FormItemMeta_order_by!]
    """filter the rows returned"""
    where: FormItemMeta_bool_exp
  ): [FormItemMeta!]!
  """
  fetch aggregated fields from the table: "FormItemMeta"
  """
  FormItemMeta_aggregate(
    """distinct select on columns"""
    distinct_on: [FormItemMeta_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FormItemMeta_order_by!]
    """filter the rows returned"""
    where: FormItemMeta_bool_exp
  ): FormItemMeta_aggregate!
  """fetch data from the table: "FormItemMeta" using primary key columns"""
  FormItemMeta_by_pk(id: Int!): FormItemMeta
  """
  fetch data from the table in a streaming manner: "FormItemMeta"
  """
  FormItemMeta_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [FormItemMeta_stream_cursor_input]!
    """filter the rows returned"""
    where: FormItemMeta_bool_exp
  ): [FormItemMeta!]!
  """
  fetch data from the table: "FormItemType"
  """
  FormItemType(
    """distinct select on columns"""
    distinct_on: [FormItemType_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FormItemType_order_by!]
    """filter the rows returned"""
    where: FormItemType_bool_exp
  ): [FormItemType!]!
  """
  fetch aggregated fields from the table: "FormItemType"
  """
  FormItemType_aggregate(
    """distinct select on columns"""
    distinct_on: [FormItemType_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FormItemType_order_by!]
    """filter the rows returned"""
    where: FormItemType_bool_exp
  ): FormItemType_aggregate!
  """fetch data from the table: "FormItemType" using primary key columns"""
  FormItemType_by_pk(type: String!): FormItemType
  """
  fetch data from the table in a streaming manner: "FormItemType"
  """
  FormItemType_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [FormItemType_stream_cursor_input]!
    """filter the rows returned"""
    where: FormItemType_bool_exp
  ): [FormItemType!]!
  """
  fetch aggregated fields from the table: "FormItem"
  """
  FormItem_aggregate(
    """distinct select on columns"""
    distinct_on: [FormItem_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FormItem_order_by!]
    """filter the rows returned"""
    where: FormItem_bool_exp
  ): FormItem_aggregate!
  """fetch data from the table: "FormItem" using primary key columns"""
  FormItem_by_pk(id: String!): FormItem
  """
  fetch data from the table in a streaming manner: "FormItem"
  """
  FormItem_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [FormItem_stream_cursor_input]!
    """filter the rows returned"""
    where: FormItem_bool_exp
  ): [FormItem!]!
  """
  fetch aggregated fields from the table: "Form"
  """
  Form_aggregate(
    """distinct select on columns"""
    distinct_on: [Form_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Form_order_by!]
    """filter the rows returned"""
    where: Form_bool_exp
  ): Form_aggregate!
  """fetch data from the table: "Form" using primary key columns"""
  Form_by_pk(id: String!): Form
  """
  fetch data from the table in a streaming manner: "Form"
  """
  Form_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [Form_stream_cursor_input]!
    """filter the rows returned"""
    where: Form_bool_exp
  ): [Form!]!
  """
  fetch data from the table: "Notification"
  """
  Notification(
    """distinct select on columns"""
    distinct_on: [Notification_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Notification_order_by!]
    """filter the rows returned"""
    where: Notification_bool_exp
  ): [Notification!]!
  """
  fetch aggregated fields from the table: "Notification"
  """
  Notification_aggregate(
    """distinct select on columns"""
    distinct_on: [Notification_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Notification_order_by!]
    """filter the rows returned"""
    where: Notification_bool_exp
  ): Notification_aggregate!
  """fetch data from the table: "Notification" using primary key columns"""
  Notification_by_pk(id: Int!): Notification
  """
  fetch data from the table in a streaming manner: "Notification"
  """
  Notification_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [Notification_stream_cursor_input]!
    """filter the rows returned"""
    where: Notification_bool_exp
  ): [Notification!]!
  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [users_order_by!]
    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!
  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [users_order_by!]
    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!
  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: String!): users
  """
  fetch data from the table in a streaming manner: "users"
  """
  users_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [users_stream_cursor_input]!
    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""users"""
type users {
  id: String!
  last_seen: timestamptz!
  name: String!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  id: String_comparison_exp
  last_seen: timestamptz_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  users_pkey
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  id: String
  last_seen: timestamptz
  name: String
}

"""aggregate max on columns"""
type users_max_fields {
  id: String
  last_seen: timestamptz
  name: String
}

"""aggregate min on columns"""
type users_min_fields {
  id: String
  last_seen: timestamptz
  name: String
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
on_conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "users"."""
input users_order_by {
  id: order_by
  last_seen: order_by
  name: order_by
}

"""primary key columns input for table: users"""
input users_pk_columns_input {
  id: String!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  id
  """column name"""
  last_seen
  """column name"""
  name
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  id: String
  last_seen: timestamptz
  name: String
}

"""
Streaming cursor of the table "users"
"""
input users_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: users_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input users_stream_cursor_value_input {
  id: String
  last_seen: timestamptz
  name: String
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  id
  """column name"""
  last_seen
  """column name"""
  name
}

input users_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: users_set_input
  """filter the rows which have to be updated"""
  where: users_bool_exp!
}